<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>Game ‚Äì Room <%= roomCode %></title>
  <link rel="stylesheet" href="/css/game_styles.css" />
</head>
<body class="game-room">

  <div class="overlay"></div>

  <main class="game-container">
    <h1>Room: <%= roomCode %></h1>
    <h2 id="current-turn">Waiting for turn info‚Ä¶</h2>

    <section id="table-info">
      <p><strong>Card of the Table:</strong> <span id="card-of-table">?</span></p>
    </section>

    <div id="turn-info" class="turn-message">Waiting for game to start‚Ä¶</div>

    <section id="hand-section">
      <h3>Your Hand:</h3>
      <div id="hand"></div>
    </section>

    <section id="actions">
      <button id="play-btn" disabled>Play Selected</button>
      <button id="call-liar-btn" disabled>Call Liar</button>
    </section>

    <section id="messages" class="game-log"></section>

    <section id="winner-list" class="winner-section"></section>
  </main>

  <script src="/socket.io/socket.io.js"></script>
  <script>
    const socket      = io();
    const roomCode    = '<%= roomCode %>';
    const currentUser = '<%= currentUser %>';

    let playersOrder = [];
    let selected     = [];
    let prevPlay     = null;
    let winners      = [];

    function renderHand(hand) {
      const handDiv = document.getElementById('hand');
      handDiv.innerHTML = '';
      selected = [];
      document.getElementById('play-btn').disabled = true;
      (hand || []).forEach((card, idx) => {
        const span = document.createElement('span');
        span.textContent = card;
        span.dataset.idx = idx;
        span.classList.add('card');
        span.onclick = () => {
          const i = selected.indexOf(idx);
          if (i === -1) {
            selected.push(idx);
            span.classList.add('selected');
          } else {
            selected.splice(i, 1);
            span.classList.remove('selected');
          }
          document.getElementById('play-btn').disabled = (selected.length === 0);
        };
        handDiv.appendChild(span);
      });
    }

    function updateTurn(turnIndex) {
      const turnInfo = document.getElementById('turn-info');
      const currentTurn = document.getElementById('current-turn');
      const playBtn  = document.getElementById('play-btn');
      const liarBtn  = document.getElementById('call-liar-btn');

      if (!playersOrder.length) {
        turnInfo.textContent = 'Waiting for players‚Ä¶';
        currentTurn.textContent = '';
        playBtn.disabled = true;
        liarBtn.disabled = true;
        return;
      }

      const current = playersOrder[turnIndex];
      currentTurn.textContent = `Current Turn: ${current}`;

      if (current === currentUser) {
        turnInfo.textContent = 'Your turn!';
        playBtn.disabled = (selected.length === 0);
        liarBtn.disabled = !(prevPlay && prevPlay.by !== currentUser);
      } else {
        turnInfo.textContent = `${current}‚Äôs turn‚Ä¶`;
        playBtn.disabled = true;
        liarBtn.disabled = true;
      }
    }

    function appendLog(text) {
      const d = document.createElement('div');
      d.textContent = text;
      document.getElementById('messages').appendChild(d);
      d.scrollIntoView({ behavior: 'smooth', block: 'end' });
    }

    function renderWinnersList() {
      const div = document.getElementById('winner-list');
      if (!winners.length) {
        div.textContent = '';
        return;
      }
      div.innerHTML = '<strong>üèÜ Winners in order:</strong><br>' + winners.map((p, idx) => {
        return `${idx + 1}. ${p}`;
      }).join('<br>');
    }

    socket.emit('join-game', { roomCode, username: currentUser });

    socket.on('game-state', ({ cardOfTable, hands, turnIndex, players, prevPlay: p, winners: w }) => {
      playersOrder = players.slice();
      prevPlay     = p;
      winners      = w.slice();
      document.getElementById('card-of-table').textContent = cardOfTable;
      renderHand(hands[currentUser] || []);
      updateTurn(turnIndex);
      renderWinnersList();
    });

    socket.on('play-made', ({ by, count, turnIndex, finished }) => {
      appendLog(`${by} played ${count} card(s).`);
      prevPlay = { by, finished };
      updateTurn(turnIndex);
      if (finished) {
        appendLog(`${by} has emptied their hand! Next player may call liar or let them win.`);
      }
    });

    socket.on('liar-result', ({ caller, target, wasLie }) => {
      const msg = wasLie
        ? `${caller} called liar on ${target}. ${target} lied!`
        : `${caller} called liar on ${target}. ${target} was truthful!`;
      appendLog(msg);
      if (!wasLie && prevPlay && prevPlay.finished) {
        appendLog(`${target} wins by emptying their hand!`);
      }
      prevPlay = null;
    });

    socket.on('player-shot', ({ player, died }) => {
      appendLog(`${player} pulled the trigger and ${died ? 'died!' : 'survived.'}`);
    });

    socket.on('player-won', ({ winner }) => {
      appendLog(`${winner} has won this round by emptying their hand!`);
    });

    socket.on('turn-changed', ({ turnIndex }) => {
      updateTurn(turnIndex);
    });

    socket.on('update-hand', hand => renderHand(hand));

    socket.on('game-over', ({ winners: w }) => {
      winners = w.slice();
      renderWinnersList();
      alert('Game over! Check the winner list above.');
    });

    socket.on('game-error', alert);

    document.getElementById('play-btn').onclick = () => {
      socket.emit('play-cards', { roomCode, username: currentUser, indices: selected });
      document.getElementById('play-btn').disabled = true;
    };

    document.getElementById('call-liar-btn').onclick = () => {
      socket.emit('call-liar', { roomCode, username: currentUser });
      document.getElementById('call-liar-btn').disabled = true;
    };
  </script>
</body>
</html>
